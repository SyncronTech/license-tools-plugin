import java.util.regex.Pattern

apply from: project.file('metadata.gradle')

ext {
    versionFile = project.file("VERSION")
    versionName = versionFile.readLines()[0].trim()
    metadata.version = ext.versionName
}

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }

    ext.kotlin_version = '1.3.21'

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
    }
}

wrapper {
    gradleVersion '5.4.1'
}

def updateReadme(oldVersion, newVersion) {
    def template = file('README.md').text
    def result = template.replaceAll(Pattern.quote(oldVersion as String), newVersion as String)
    file("README.md").withWriter { it << result }
}

task('bumpMajor').doLast {
    def oldVersion = versionName
    def versionParts = versionName.split(/\./)
    versionParts[0] = (versionParts[0] as int) + 1
    def newVersion = "${versionParts[0]}.0.0"
    versionFile.write(newVersion + "\n")
    updateReadme(oldVersion, newVersion)
    tasks.version.execute()
}

task('bumpMinor').doLast {
    def oldVersion = versionName
    def versionParts = versionName.split(/\./)
    versionParts[1] = (versionParts[1] as int) + 1
    def newVersion = "${versionParts[0]}.${versionParts[1]}.0"
    versionFile.write(newVersion + "\n")
    updateReadme(oldVersion, newVersion)
    tasks.version.execute()
}

task('bumpPatch').doLast {
    def oldVersion = versionName
    def versionParts = versionName.split(/\./)
    versionParts[2] = (versionParts[2] as int) + 1
    def newVersion = "${versionParts[0]}.${versionParts[1]}.${versionParts[2]}"
    versionFile.write(newVersion + "\n")
    updateReadme(oldVersion, newVersion)
    tasks.version.execute()
}

task('version').doLast {
    println "v" + versionFile.readLines()[0]
}

String shell(String command) {
    def proc = ["sh", "-c", "cd ${project.rootDir} ; ${command}"].execute()
    if (proc.waitFor() != 0) {
        throw new RuntimeException("Failed to run: ${command}\n${proc.err.text}" as String)
    } else {
        def err = proc.err.text
        if (err) {
            System.err.println(err)
        }
    }
    return proc.in.text
}

task('releng').doLast {
    def tag = "v" + versionName
    println "Release engineering for ${tag}"

    def changes = shell "git status -s"
    if (changes.trim()) {
        throw new RuntimeException("There are changes not commited yet.\n${changes}" as String)
    }

    println "> git tag ${tag}"
    shell "git tag ${tag}"
    println "> git push origin ${tag}"
    shell "git push origin ${tag}"
    shell "git push origin master"
}
